
adv_micro_proj_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000110  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060b  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057d  00000000  00000000  0000078f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000256  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00000f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000322  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cd  00000000  00000000  000012ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 44 00 	jmp	0x88	; 0x88 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	 }
 }

int main(void)
{
	DDRA = 0x00; //PORTA as i/p
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0xFF; //PORTC as o/p
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20
	//char slot2[12] = "b";
	//char final[24];
	
	while(1)
	{
		if (PINA & 0b00000001)
  72:	c8 9b       	sbis	0x19, 0	; 25
  74:	02 c0       	rjmp	.+4      	; 0x7a <main+0xe>
		{
			PORTC = PORTC | 0b00000001;
  76:	a8 9a       	sbi	0x15, 0	; 21
  78:	01 c0       	rjmp	.+2      	; 0x7c <main+0x10>
			//slot1[20] = "Full1";
		}
		else
		{
			PORTC = 0x00;
  7a:	15 ba       	out	0x15, r1	; 21
			//slot1[20] = "Empty1";
		}
		
		if (PINA & 0b00000010)
  7c:	c9 9b       	sbis	0x19, 1	; 25
  7e:	02 c0       	rjmp	.+4      	; 0x84 <main+0x18>
		{
		
			PORTC = PORTC | 0b00000010;
  80:	a9 9a       	sbi	0x15, 1	; 21
  82:	f7 cf       	rjmp	.-18     	; 0x72 <main+0x6>
			//slot2[20] = "Full2";	
		}

		else
		{
			PORTC =0x00;
  84:	15 ba       	out	0x15, r1	; 21
  86:	f5 cf       	rjmp	.-22     	; 0x72 <main+0x6>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
